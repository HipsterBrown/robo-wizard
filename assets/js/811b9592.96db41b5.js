"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[804],{4852:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return u}});var n=a(9231);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),d=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=d(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),k=d(a),u=r,c=k["".concat(p,".").concat(u)]||k[u]||m[u]||i;return a?n.createElement(c,l(l({ref:t},s),{},{components:a})):n.createElement(c,l({ref:t},s))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},4719:function(e,t,a){a.r(t),a.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return m}});var n=a(2208),r=a(9161),i=(a(9231),a(4852)),l=["components"],o={id:"robo_wizard",title:"Module: robo-wizard",sidebar_label:"robo-wizard",sidebar_position:0,custom_edit_url:null},p=void 0,d={unversionedId:"api/modules/robo_wizard",id:"api/modules/robo_wizard",title:"Module: robo-wizard",description:"Classes",source:"@site/docs/api/modules/robo_wizard.md",sourceDirName:"api/modules",slug:"/api/modules/robo_wizard",permalink:"/docs/api/modules/robo_wizard",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"robo_wizard",title:"Module: robo-wizard",sidebar_label:"robo-wizard",sidebar_position:0,custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"Exports",permalink:"/docs/api/modules"},next:{title:"@robo-wizard/react",permalink:"/docs/api/modules/robo_wizard_react"}},s={},m=[{value:"Classes",id:"classes",level:2},{value:"Type aliases",id:"type-aliases",level:2},{value:"BaseValues",id:"basevalues",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"FlowStep",id:"flowstep",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"StepConfig",id:"stepconfig",level:3},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Type declaration",id:"type-declaration",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"StepTransition",id:"steptransition",level:3},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"WhenFunction",id:"whenfunction",level:3},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Type declaration",id:"type-declaration-1",level:4},{value:"Parameters",id:"parameters",level:5},{value:"Returns",id:"returns",level:5},{value:"Defined in",id:"defined-in-4",level:4},{value:"WizardEvent",id:"wizardevent",level:3},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"WizardMachine",id:"wizardmachine",level:3},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"Functions",id:"functions",level:2},{value:"createWizard",id:"createwizard",level:3},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"when",id:"when",level:3},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-8",level:4}],k={toc:m};function u(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"classes"},"Classes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/api/classes/robo_wizard.RoboWizard"},"RoboWizard"))),(0,i.kt)("h2",{id:"type-aliases"},"Type aliases"),(0,i.kt)("h3",{id:"basevalues"},"BaseValues"),(0,i.kt)("p",null,"\u01ac ",(0,i.kt)("strong",{parentName:"p"},"BaseValues"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"object")),(0,i.kt)("p",null,"Base type describing an object of string keys and ",(0,i.kt)("inlineCode",{parentName:"p"},"any")," value"),(0,i.kt)("h4",{id:"defined-in"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/HipsterBrown/robo-wizard/blob/59dc14a/packages/core/src/index.ts#L4"},"core/src/index.ts:4")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"flowstep"},"FlowStep"),(0,i.kt)("p",null,"\u01ac ",(0,i.kt)("strong",{parentName:"p"},"FlowStep"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">",": ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," ","|"," ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/modules/robo_wizard#stepconfig"},(0,i.kt)("inlineCode",{parentName:"a"},"StepConfig")),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">"),(0,i.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Values")),(0,i.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,i.kt)("inlineCode",{parentName:"td"},"object")," = ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#basevalues"},(0,i.kt)("inlineCode",{parentName:"a"},"BaseValues"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"Generic type for object of values being gathered through the wizard steps  A step in the wizard can be described as a string for default progression, or an object for custom progression, see ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#stepconfig"},"StepConfig")," for more details")))),(0,i.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/HipsterBrown/robo-wizard/blob/59dc14a/packages/core/src/index.ts#L66"},"core/src/index.ts:66")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"stepconfig"},"StepConfig"),(0,i.kt)("p",null,"\u01ac ",(0,i.kt)("strong",{parentName:"p"},"StepConfig"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">",": ",(0,i.kt)("inlineCode",{parentName:"p"},"Object")),(0,i.kt)("h4",{id:"type-parameters-1"},"Type parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Values")),(0,i.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,i.kt)("inlineCode",{parentName:"td"},"object")," = ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#basevalues"},(0,i.kt)("inlineCode",{parentName:"a"},"BaseValues"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"Generic type for object of values being gathered through the wizard steps")))),(0,i.kt)("h4",{id:"type-declaration"},"Type declaration"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"name")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Name of the step")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"next?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#steptransition"},(0,i.kt)("inlineCode",{parentName:"a"},"StepTransition")),"<",(0,i.kt)("inlineCode",{parentName:"td"},"Values"),">","[] ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Name of the next step in progression after calling ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/classes/robo_wizard.RoboWizard#gotonextstep"},"goToNextStep"),". Passing ",(0,i.kt)("inlineCode",{parentName:"td"},"false")," will prevent the wizard from progressing forward at this step. Passing a ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#steptransition"},"StepTransition")," array allows for conditional progression using the [","[",(0,i.kt)("inlineCode",{parentName:"td"},"when"),"]","] helper.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"previous?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#steptransition"},(0,i.kt)("inlineCode",{parentName:"a"},"StepTransition")),"<",(0,i.kt)("inlineCode",{parentName:"td"},"Values"),">","[] ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Name of the previous step in progression after calling ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/classes/robo_wizard.RoboWizard#gotopreviousstep"},"goToPreviousStep"),". Passing ",(0,i.kt)("inlineCode",{parentName:"td"},"false")," will prevent the wizard from progressing backwards at this step. Passing a ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#steptransition"},"StepTransition")," array allows for conditional progression using the [","[",(0,i.kt)("inlineCode",{parentName:"td"},"when"),"]","] helper.")))),(0,i.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/HipsterBrown/robo-wizard/blob/59dc14a/packages/core/src/index.ts#L44"},"core/src/index.ts:44")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"steptransition"},"StepTransition"),(0,i.kt)("p",null,"\u01ac ",(0,i.kt)("strong",{parentName:"p"},"StepTransition"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">",": ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," ","|"," (",(0,i.kt)("inlineCode",{parentName:"p"},"string")," ","|"," { ",(0,i.kt)("inlineCode",{parentName:"p"},"cond"),": ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/modules/robo_wizard#whenfunction"},(0,i.kt)("inlineCode",{parentName:"a"},"WhenFunction")),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">","  })[]"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"example"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"[\n  ['conditionalStep', when((currentValues, { values }) => values.showConditional === true)],\n  'fallbackStep'\n] // StepTransition[]\n")),(0,i.kt)("h4",{id:"type-parameters-2"},"Type parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Values")),(0,i.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,i.kt)("inlineCode",{parentName:"td"},"object")," = ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#basevalues"},(0,i.kt)("inlineCode",{parentName:"a"},"BaseValues"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"Generic type for object of values being gathered through the wizard steps  A string is a shorthand for an always true conditional guard, i.e. ",(0,i.kt)("inlineCode",{parentName:"td"},"['nextStep', when(() => true)]")," The array version should be a tuple with the string name of a step, paired with a guard, like ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#when"},"when"),":")))),(0,i.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/HipsterBrown/robo-wizard/blob/59dc14a/packages/core/src/index.ts#L37"},"core/src/index.ts:37")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"whenfunction"},"WhenFunction"),(0,i.kt)("p",null,"\u01ac ",(0,i.kt)("strong",{parentName:"p"},"WhenFunction"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">",": (",(0,i.kt)("inlineCode",{parentName:"p"},"values"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"event"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"UpdateEvent"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">",") => ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean")),(0,i.kt)("h4",{id:"type-parameters-3"},"Type parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Values")),(0,i.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,i.kt)("inlineCode",{parentName:"td"},"object")," = ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#basevalues"},(0,i.kt)("inlineCode",{parentName:"a"},"BaseValues"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"Generic type for object of values being gathered through the wizard steps")))),(0,i.kt)("h4",{id:"type-declaration-1"},"Type declaration"),(0,i.kt)("p",null,"\u25b8 (",(0,i.kt)("inlineCode",{parentName:"p"},"values"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"event"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean")),(0,i.kt)("h5",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"values")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Values")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Current state of values gathered through the wizard")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"event")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"UpdateEvent"),"<",(0,i.kt)("inlineCode",{parentName:"td"},"Values"),">"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Event object containing any new values to be updated, see [","[UpdateEvent]","]")))),(0,i.kt)("h5",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"boolean")),(0,i.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/HipsterBrown/robo-wizard/blob/59dc14a/packages/core/src/index.ts#L19"},"core/src/index.ts:19")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"wizardevent"},"WizardEvent"),(0,i.kt)("p",null,"\u01ac ",(0,i.kt)("strong",{parentName:"p"},"WizardEvent"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">",": { ",(0,i.kt)("inlineCode",{parentName:"p"},"type"),": ",(0,i.kt)("inlineCode",{parentName:"p"},'"next"')," ; ",(0,i.kt)("inlineCode",{parentName:"p"},"values?"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"Partial"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">","  } ","|"," { ",(0,i.kt)("inlineCode",{parentName:"p"},"type"),": ",(0,i.kt)("inlineCode",{parentName:"p"},'"previous"'),"  } ","|"," { ",(0,i.kt)("inlineCode",{parentName:"p"},"type"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," ; ",(0,i.kt)("inlineCode",{parentName:"p"},"values?"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"Partial"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">","  }"),(0,i.kt)("h4",{id:"type-parameters-4"},"Type parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Values")),(0,i.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,i.kt)("inlineCode",{parentName:"td"},"object"))))),(0,i.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/HipsterBrown/robo-wizard/blob/59dc14a/packages/core/src/index.ts#L70"},"core/src/index.ts:70")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"wizardmachine"},"WizardMachine"),(0,i.kt)("p",null,"\u01ac ",(0,i.kt)("strong",{parentName:"p"},"WizardMachine"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">",": ",(0,i.kt)("inlineCode",{parentName:"p"},"StateMachine.Machine"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/modules/robo_wizard#wizardevent"},(0,i.kt)("inlineCode",{parentName:"a"},"WizardEvent")),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">",", ",(0,i.kt)("inlineCode",{parentName:"p"},"any"),">"),(0,i.kt)("h4",{id:"type-parameters-5"},"Type parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Values")),(0,i.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,i.kt)("inlineCode",{parentName:"td"},"object")," = ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#basevalues"},(0,i.kt)("inlineCode",{parentName:"a"},"BaseValues")))))),(0,i.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/HipsterBrown/robo-wizard/blob/59dc14a/packages/core/src/index.ts#L83"},"core/src/index.ts:83")),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"createwizard"},"createWizard"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"createWizard"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">","(",(0,i.kt)("inlineCode",{parentName:"p"},"steps"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"initialValues?"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"actions?"),"): ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/classes/robo_wizard.RoboWizard"},(0,i.kt)("inlineCode",{parentName:"a"},"RoboWizard")),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"example"))," Initial set up with a listener for updates to the wizard"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createWizard } from 'robo-wizard';\n\nconst wizard = createWizard(['first', 'second', 'third']);\nwizard.start(updatedWizard => { console.log('Updated!', updatedWizard.currentStep) });\n\nconsole.log(wizard.currentStep); // first\n\nwizard.goToNextStep();\n\nconsole.log(wizard.currentStep); // second\n\nwizard.goToNextStep();\n\nconsole.log(wizard.currentStep); // third\n\nwizard.goToPreviousStep();\n\nconsole.log(wizard.currentStep); // second\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"example"))," Gathering values through each step when progressing forward"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createWizard } from 'robo-wizard';\n\nconst wizard = createWizard(['first', 'second', 'third'], { firstName: '', lastName: '' });\nwizard.start(updatedWizard => { console.log('Updated!', updatedWizard.currentStep), updatedWizard.currentValues });\n\nconsole.log(wizard.currentValues); // { firstName: '', lastName: '' }\n;\nwizard.goToNextStep({ values: { firstName: 'Jane' } });\n\nconsole.log(wizard.currentValues); // { firstName: 'Jane', lastName: '' }\n\nwizard.goToNextStep({ values: { lastName: 'Doe' } });\n\nconsole.log(wizard.currentValues); // { firstName: 'Jane', lastName: 'Doe' }\n\nwizard.goToPreviousStep({ values: { firstName: '', lastName: '' } });\n\nconsole.log(wizard.currentValues); // { firstName: '', lastName: '' }\n")),(0,i.kt)("p",null,"By default, the wizard will progress linearly in the order of array passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"createWizard"),". That behavior can be overriden by passing an ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/modules/robo_wizard#stepconfig"},"StepConfig")," to in place of the string step name:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"example"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createWizard } from 'robo-wizard';\n\nconst wizard = createWizard([\n  { name: 'first', next: 'third' }, 'skipped', {name: 'third', previous: 'first'}\n]);\nwizard.start(updatedWizard => { console.log('Updated!', updatedWizard.currentStep) });\n\nconsole.log(wizard.currentStep); // first\n;\nwizard.goToNextStep();\n\nconsole.log(wizard.currentStep); // third\n\nwizard.goToPreviousStep();\n\nconsole.log(wizard.currentStep); // first\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"example"))," Progression can be conditional using the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/modules/robo_wizard#when"},"when")," helper"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createWizard, when } from 'robo-wizard';\n\nconst wizard = createWizard([\n  { name: 'first', next: [['third', when((currentValues, { values }) => values.goToThird )], 'second'] },\n  'second',\n  {name: 'third', previous: 'first'}\n], { goToThird: false });\nwizard.start(updatedWizard => { console.log('Updated!', updatedWizard.currentStep) });\n\nconsole.log(wizard.currentStep); // first\n;\nwizard.goToNextStep({ values: { goToThird: true } });\n\nconsole.log(wizard.currentStep); // third\n\nwizard.goToPreviousStep({ values: { goToThird: false } });\n\nconsole.log(wizard.currentStep); // first\n\nwizard.goToNextStep();\n\nconsole.log(wizard.currentStep); // second\n\nwizard.goToNextStep();\n\nconsole.log(wizard.currentStep); // third\n")),(0,i.kt)("h4",{id:"type-parameters-6"},"Type parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Values")),(0,i.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,i.kt)("inlineCode",{parentName:"td"},"object")," = ",(0,i.kt)("inlineCode",{parentName:"td"},"object")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Generic type for object of values being gathered through the wizard steps")))),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"steps")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#flowstep"},(0,i.kt)("inlineCode",{parentName:"a"},"FlowStep")),"<",(0,i.kt)("inlineCode",{parentName:"td"},"Values"),">","[]"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Configuration of steps for the wizard, see ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#flowstep"},"FlowStep"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"initialValues")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Values")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Optional object with intial values to use when starting the wizard")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"actions")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Object")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Optional object with navigate field with a function to be called when entering a step")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"actions.navigate?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ActionFunction"),"<",(0,i.kt)("inlineCode",{parentName:"td"},"Values"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#wizardevent"},(0,i.kt)("inlineCode",{parentName:"a"},"WizardEvent")),"<",(0,i.kt)("inlineCode",{parentName:"td"},"Values"),">",">"),(0,i.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/api/classes/robo_wizard.RoboWizard"},(0,i.kt)("inlineCode",{parentName:"a"},"RoboWizard")),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">"),(0,i.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/HipsterBrown/robo-wizard/blob/59dc14a/packages/core/src/index.ts#L340"},"core/src/index.ts:340")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"when"},"when"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"when"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">","(",(0,i.kt)("inlineCode",{parentName:"p"},"cond"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"Object")),(0,i.kt)("h4",{id:"type-parameters-7"},"Type parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Values")),(0,i.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,i.kt)("inlineCode",{parentName:"td"},"object")," = ",(0,i.kt)("inlineCode",{parentName:"td"},"object")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Generic type for object of values being gathered through the wizard steps")))),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"cond")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#whenfunction"},(0,i.kt)("inlineCode",{parentName:"a"},"WhenFunction")),"<",(0,i.kt)("inlineCode",{parentName:"td"},"Values"),">"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Guard function to be called to test if the step should transition, see ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#whenfunction"},"WhenFunction")," See ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#createwizard"},"createWizard")," for example usage")))),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Object")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"cond")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#whenfunction"},(0,i.kt)("inlineCode",{parentName:"a"},"WhenFunction")),"<",(0,i.kt)("inlineCode",{parentName:"td"},"Values"),">")))),(0,i.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/HipsterBrown/robo-wizard/blob/59dc14a/packages/core/src/index.ts#L410"},"core/src/index.ts:410")))}u.isMDXComponent=!0}}]);