"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[229],{4852:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(9231);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),p=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,f=c["".concat(d,".").concat(m)]||c[m]||s[m]||i;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3255:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return s}});var r=n(2208),a=n(9161),i=(n(9231),n(4852)),o=["components"],l={id:"robo_wizard_react",title:"Module: @robo-wizard/react",sidebar_label:"@robo-wizard/react",sidebar_position:0,custom_edit_url:null},d=void 0,p={unversionedId:"api/modules/robo_wizard_react",id:"api/modules/robo_wizard_react",title:"Module: @robo-wizard/react",description:"Functions",source:"@site/docs/api/modules/robo_wizard_react.md",sourceDirName:"api/modules",slug:"/api/modules/robo_wizard_react",permalink:"/docs/api/modules/robo_wizard_react",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"robo_wizard_react",title:"Module: @robo-wizard/react",sidebar_label:"@robo-wizard/react",sidebar_position:0,custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"robo-wizard",permalink:"/docs/api/modules/robo_wizard"},next:{title:"@robo-wizard/react-router",permalink:"/docs/api/modules/robo_wizard_react_router"}},u={},s=[{value:"Functions",id:"functions",level:2},{value:"useWizard",id:"usewizard",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4}],c={toc:s};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"usewizard"},"useWizard"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"useWizard"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">","(",(0,i.kt)("inlineCode",{parentName:"p"},"steps"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"initialValues?"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"actions?"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"RoboWizard"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"example"))," Basic usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'\n const App: React.FC = () => {\n   const wizard = useWizard<Values>([\'first\', \'second\', \'third\']);\n\n   const onSubmit: React.FormEventHandler<HTMLFormElement> = event => {\n     event.preventDefault();\n     const values = Object.fromEntries(new FormData(event.currentTarget))\n     wizard.goToNextStep({ values });\n   };\n\n   return (\n     <div>\n       <p>{wizard.currentStep} step</p>\n       <form onSubmit={onSubmit}>\n         {wizard.currentStep === \'first\' && (\n           <div>\n             <label\n               htmlFor="firstName"\n               id="firstName-label"\n             >\n               First Name:\n             </label>\n             <input\n               type="text"\n               name="firstName"\n               id="firstName"\n               aria-label="firstName-label"\n               defaultValue={wizard.currentValues.firstName}\n             />\n           </div>\n         )}\n\n         {wizard.currentStep === \'second\' && (\n           <div>\n             <label\n               htmlFor="lastName"\n               id="lastName-label"\n             >\n               Last Name:\n             </label>\n             <input\n               type="text"\n               name="lastName"\n               id="lastName"\n               aria-label="lastName-label"\n               defaultValue={wizard.currentValues.lastName}\n             />\n           </div>\n         )}\n\n         {wizard.currentStep === \'third\' && (\n           <div>\n             <p>\n               Welcome {wizard.currentValues.firstName}{\' \'}\n               {wizard.currentValues.lastName}!\n             </p>\n           </div>\n         )}\n\n         <div>\n           <button\n             type="button"\n             role="link"\n             onClick={() => wizard.goToPreviousStep()}\n           >\n             Previous\n           </button>\n           <button type="submit">\n             Next\n           </button>\n         </div>\n       </form>\n     </div>\n   );\n };\n')),(0,i.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Values")),(0,i.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,i.kt)("inlineCode",{parentName:"td"},"object")," = ",(0,i.kt)("inlineCode",{parentName:"td"},"object")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Generic type for object of values being gathered through the wizard steps")))),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"steps")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"FlowStep"),"<",(0,i.kt)("inlineCode",{parentName:"td"},"Values"),">","[]"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Configuration of steps for the wizard, see ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/modules/robo_wizard#flowstep"},"FlowStep"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"initialValues")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Values")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Optional object with intial values to use when starting the wizard")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"actions")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")," ","|"," { ",(0,i.kt)("inlineCode",{parentName:"td"},"navigate?"),": ",(0,i.kt)("inlineCode",{parentName:"td"},"ActionFunction"),"<",(0,i.kt)("inlineCode",{parentName:"td"},"object"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"WizardEvent"),"<",(0,i.kt)("inlineCode",{parentName:"td"},"object"),">",">","  }"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Optional object with navigate field with a function to be called when entering a step")))),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"RoboWizard"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Values"),">"),(0,i.kt)("h4",{id:"defined-in"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/HipsterBrown/robo-wizard/blob/3cac85d/packages/react/src/hooks/use-wizard.ts#L89"},"react/src/hooks/use-wizard.ts:89")))}m.isMDXComponent=!0}}]);